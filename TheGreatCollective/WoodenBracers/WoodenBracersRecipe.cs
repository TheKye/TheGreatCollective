// Copyright (c) Strange Loop Games. All rights reserved.
// See LICENSE file in the project root for full license information.
// <auto-generated />

namespace Eco.Mods.TechTree
{
    using System.Collections.Generic;
    using Eco.Gameplay.Components;
    using Eco.Gameplay.Items;
    using Eco.Shared.Localization;

    public partial class Wb1x2Recipe : RecipeFamily
    {
        public Wb1x2Recipe()
        {
            this.Recipes = new List<Recipe>
            {
                new Recipe(
                    "Wooden Bracers 1x2",
                    Localizer.DoStr("1x2 Wooden Bracers"),
                    new IngredientElement[]
                    {
                        new IngredientElement("Wood", 2, typeof(LoggingSkill)), // 2 log required
                    },
                    new CraftingElement[]
                    {
                        new CraftingElement <Wb1x2Item>(1), // makes 1 Wooden Bracers 1x2 
	                }

            )};

            this.ExperienceOnCraft = 0.5f;
            this.LaborInCalories = CreateLaborInCaloriesValue(30);
            this.CraftMinutes = CreateCraftTimeValue(typeof(Wb1x2Recipe), 10, typeof(LoggingSkill));
            this.Initialize(Localizer.DoStr("1x2 Wooden Bracers"), typeof(Wb1x2Recipe));

            CraftingComponent.AddRecipe(typeof(CarpentryTableObject), this);
        }
    }

    public class Wb1x3Recipe : RecipeFamily
    {
        public Wb1x3Recipe()
        {
            this.Recipes = new List<Recipe>
            {
                new Recipe(
                    "1x3 Wooden Bracers",
                    Localizer.DoStr("1x3 Wooden Bracers"),
                    new IngredientElement[]
                    {
               new IngredientElement("Wood", 3, typeof(LoggingSkill)), // 3 log required
                    },
                    new CraftingElement[]
                    {
               new CraftingElement<Wb1x3Item>(1), // makes 1 Wooden Bracers 1x3 
    
                    })
            };
            this.ExperienceOnCraft = 0.5f;
            this.LaborInCalories = CreateLaborInCaloriesValue(30);
            this.CraftMinutes = CreateCraftTimeValue(typeof(Wb1x3Recipe), 10, typeof(LoggingSkill));
            this.Initialize(Localizer.DoStr("1x3 Wooden Bracers"), typeof(Wb1x3Recipe));

            CraftingComponent.AddRecipe(typeof(CarpentryTableObject), this);
        }
    }
    public class Wb1x5Recipe : RecipeFamily
    {
        public Wb1x5Recipe()
        {
            this.Recipes = new List<Recipe>
            {
                new Recipe(
                    "1x5 Wooden Bracers",
                    Localizer.DoStr("1x5 Wooden Bracers"),
                    new IngredientElement[]
                    {
               new IngredientElement("Wood", 3, typeof(LoggingSkill)), // 3 log required
                    },
                    new CraftingElement[]
                    {
               new CraftingElement<Wb1x5Item>(1), // makes 1 Wooden Bracers 1x5
    
                    })
            };
            this.ExperienceOnCraft = 0.5f;
            this.LaborInCalories = CreateLaborInCaloriesValue(30);
            this.CraftMinutes = CreateCraftTimeValue(typeof(Wb1x5Recipe), 10, typeof(LoggingSkill));
            this.Initialize(Localizer.DoStr("1x5 Wooden Bracers"), typeof(Wb1x5Recipe));

            CraftingComponent.AddRecipe(typeof(CarpentryTableObject), this);
        }
    }
    public class Wb3x3Recipe : RecipeFamily
    {
        public Wb3x3Recipe()
        {
            this.Recipes = new List<Recipe>
            {
                new Recipe(
                    "3x3 Wooden Bracers",
                    Localizer.DoStr("3x3 Wooden Bracers"),
                    new IngredientElement[]
                    {
               new IngredientElement("Wood", 6, typeof(LoggingSkill)), // 6 log required
                    },
                    new CraftingElement[]
                    {
               new CraftingElement<Wb3x3Item>(1), // makes 1 Wooden Bracers 3x3 
    
                    })
            };
            this.ExperienceOnCraft = 0.5f;
            this.LaborInCalories = CreateLaborInCaloriesValue(30);
            this.CraftMinutes = CreateCraftTimeValue(typeof(Wb3x3Recipe), 10, typeof(LoggingSkill));
            this.Initialize(Localizer.DoStr("3x3 Wooden Bracers"), typeof(Wb3x3Recipe));

            CraftingComponent.AddRecipe(typeof(CarpentryTableObject), this);
        }
    }
    public class Wb3x5Recipe : RecipeFamily
    { 
        public Wb3x5Recipe()
        {
            this.Recipes = new List<Recipe>
            {
                new Recipe(
                    "3x5 Wooden Bracers",
                    Localizer.DoStr("3x5 Wooden Bracers"),
                    new IngredientElement[]
                    {
               new IngredientElement("Wood", 6, typeof(LoggingSkill)), // 6 log required
                    },
                    new CraftingElement[]
                    {
               new CraftingElement<Wb3x5Item>(1), // makes 1 Wooden Bracers 3x5 
    
                    })
            };
            this.ExperienceOnCraft = 0.5f;
            this.LaborInCalories = CreateLaborInCaloriesValue(30);
            this.CraftMinutes = CreateCraftTimeValue(typeof(Wb3x5Recipe), 10, typeof(LoggingSkill));
            this.Initialize(Localizer.DoStr("3x5 Wooden Bracers"), typeof(Wb3x5Recipe));

            CraftingComponent.AddRecipe(typeof(CarpentryTableObject), this);
        }
    }
}
