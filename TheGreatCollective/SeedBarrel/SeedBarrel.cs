// Copyright (c) Strange Loop Games. All rights reserved.
// See LICENSE file in the project root for full license information.
// <auto-generated />

namespace Eco.Mods.TechTree
{
      using System;
    using System.Linq;
    using System.Collections.Generic;
    using System.ComponentModel;
    using Eco.Core.Items;
    using Eco.Gameplay.Blocks;
    using Eco.Gameplay.Components;
    using Eco.Gameplay.Components.Auth;
    using Eco.Gameplay.DynamicValues;
    using Eco.Gameplay.Economy;
    using Eco.Gameplay.Housing;
    using Eco.Gameplay.Interactions;
    using Eco.Gameplay.Items;
    using Eco.Gameplay.Modules;
    using Eco.Gameplay.Minimap;
    using Eco.Gameplay.Objects;
    using Eco.Gameplay.Players;
    using Eco.Gameplay.Property;
    using Eco.Gameplay.Skills;
    using Eco.Gameplay.Systems.TextLinks;
    using Eco.Gameplay.Pipes.LiquidComponents;
    using Eco.Gameplay.Pipes.Gases;
    using Eco.Gameplay.Systems.Tooltip;
    using Eco.Shared;
    using Eco.Shared.Math;
    using Eco.Shared.Localization;
    using Eco.Shared.Serialization;
    using Eco.Shared.Utils;
    using Eco.Shared.View;
    using Eco.Shared.Items;
    using Eco.Gameplay.Pipes;
    using Eco.World.Blocks;
    
    [Serialized]
    [RequireComponent(typeof(PropertyAuthComponent))]
    [RequireComponent(typeof(LinkComponent))]                   
    [RequireComponent(typeof(PublicStorageComponent))]                
    public partial class SeedBarrelObject : 
        WorldObject,    
        IRepresentsItem
    {
        public override LocString DisplayName { get { return Localizer.DoStr("Seed Barrel"); } } 

        public override TableTextureMode TableTexture => TableTextureMode.Wood; 

        public virtual Type RepresentedItemType { get { return typeof(SeedBarrelItem); } }

        public class SeedRestriction : InventoryRestriction
        {
            public override int Priority => base.Priority - 15; //lower priority messages are overriden if a higher priority message also applies
            public override LocString Message => Localizer.DoStr("Inventory does not accept that type of item");
            public override int MaxAccepted(Item item, int currentQuantity) => item.Tags().Any(x => x.Name == "Seeds") ? -1 : 0; // if tagged "Seeds" stack to item stacksize, else do not allow.
        }

        protected override void Initialize()
        {

            var storage = this.GetComponent<PublicStorageComponent>();
            storage.Initialize(4);
            storage.Storage.AddInvRestriction(new SeedRestriction()); // can only store seeds
            storage.Storage.AddInvRestriction(new StackLimitRestriction(1600));
            this.GetComponent<LinkComponent>().Initialize(2);
        }

        public override void Destroy()
        {
            base.Destroy();
        }
       
    }

    [Serialized]
    [LocDisplayName("Seed Barrel")]
    [Ecopedia("Crafted Objects", "Storage", createAsSubPage: true, display: InPageTooltip.DynamicTooltip)]

    public partial class SeedBarrelItem :
        WorldObjectItem<SeedBarrelObject> 
    {
        public override LocString DisplayDescription  { get { return Localizer.DoStr("A barrel to store lots of seeds."); } }

        static SeedBarrelItem()
        {
            
            WorldObject.AddOccupancy<SeedBarrelObject>(new List<BlockOccupancy>(){
            new BlockOccupancy(new Vector3i(0, 0, 0)),
            new BlockOccupancy(new Vector3i(0, 1, 0)),
            });
        }

        

    }
    [RequiresSkill(typeof(FarmerSkill), 1)]
    public partial class SeedBarrelRecipe :
        RecipeFamily
    {
        public SeedBarrelRecipe()
        {
            var product = new Recipe(
                "SeedBarrel",
                Localizer.DoStr("Seed Barrel"),
                new IngredientElement[]
                {
               new IngredientElement(typeof(HewnLogItem), 10),
               new IngredientElement(typeof(DirtItem) , 5),
               new IngredientElement("Rock", 20),

                },
               new CraftingElement<SeedBarrelItem>()
            );
            this.Recipes = new List<Recipe> { product };
            this.LaborInCalories = CreateLaborInCaloriesValue(100); 
            this.CraftMinutes = CreateCraftTimeValue(3);
            this.Initialize(Localizer.DoStr("Seed Barrel"), typeof(SeedBarrelRecipe));
            CraftingComponent.AddRecipe(typeof(FarmersTableObject), this);
        }
    }
}
